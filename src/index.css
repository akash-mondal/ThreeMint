@tailwind base;
@tailwind components;
@tailwind utilities;

/* Remove this problematic style */
/* .fixed {
  background-color: black;
} */

.shapes-container {
  position: relative;
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
}

.shape {
  position: absolute;
  transform-style: preserve-3d;
  animation: float 10s ease-in-out infinite;
}

.shape:nth-child(2) { animation-delay: -2s; }
.shape:nth-child(3) { animation-delay: -4s; }
.shape:nth-child(4) { animation-delay: -6s; }
.shape:nth-child(5) { animation-delay: -8s; }

.cube-container {
  perspective: 1000px;
  width: 100px;
  height: 100px;
  cursor: pointer;
  z-index: 10;
}

.cube {
  width: 100px;
  height: 100px;
  position: relative;
  transform-style: preserve-3d;
  transform: rotateX(var(--rotate-x, 0deg)) rotateY(var(--rotate-y, 0deg));
  transition: transform 0.1s ease;
}

.cube-face {
  position: absolute;
  width: 100%;
  height: 100%;
  border: 2px solid rgba(255, 255, 255, 0.5);
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(5px);
  transition: border-color 0.3s ease, background-color 0.3s ease;
}

/* Position each face of the cube */
.cube-face.front { transform: translateZ(50px); }
.cube-face.back { transform: translateZ(-50px) rotateY(180deg); }
.cube-face.right { transform: translateX(50px) rotateY(90deg); }
.cube-face.left { transform: translateX(-50px) rotateY(-90deg); }
.cube-face.top { transform: translateY(-50px) rotateX(90deg); }
.cube-face.bottom { transform: translateY(50px) rotateX(-90deg); }

@keyframes float {
  0%, 100% {
    transform: translateY(0) translateX(0);
  }
  25% {
    transform: translateY(-20px) translateX(10px);
  }
  50% {
    transform: translateY(0) translateX(-10px);
  }
  75% {
    transform: translateY(20px) translateX(5px);
  }
}

/* Enhanced gradient interaction */
.interactive-gradient {
  background: linear-gradient(270deg, #ff0000, #00ff00, #0000ff, #ff0000);
  background-size: 600% 600%;
  animation: fluidGradient 8s linear infinite;
  position: relative;
}

/* Smooth transition between black and gradient */
.interactive-gradient::before {
  content: '';
  position: absolute;
  left: -100px;
  top: 0;
  bottom: 0;
  width: 100px;
  background: linear-gradient(to right, rgb(0, 0, 0), transparent);
  pointer-events: none;
  z-index: 5;
}

@keyframes fluidGradient {
  0% {
    background-position: 0% 50%;
  }
  100% {
    background-position: 100% 50%;
  }
}

/* Update the gradient animation with neon colors */
.gradient-side {
  background: linear-gradient(
    270deg,
    #00ff87,  /* Neon green */
    #00ffff,  /* Neon cyan */
    #7f00ff,  /* Neon purple */
    #00ff87   /* Back to neon green */
  );
  background-size: 400% 400%;
  animation: gradientAnimation 30s ease infinite; /* Slowed down to 30 seconds */
}

@keyframes gradientAnimation {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

/* Add after your existing styles */
@layer components {
  .glass-card {
    @apply relative;
  }
  
  .glass-card::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(
      225deg,
      rgba(255, 255, 255, 0.4) 0%,
      rgba(255, 255, 255, 0.1) 100%
    );
    border-radius: inherit;
    z-index: -1;
    pointer-events: none;
  }
}

@keyframes gradient-x {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

.animate-gradient-x {
  background-size: 400% 400%;
  animation: gradient-x 15s ease infinite;
}
